/*
 * Copyright (c) 2018 Smilo Platform B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.smilo.commons.ledger;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.math.BigInteger;

@Component
public class AccountBuilder {

    // Public address generated by private key "supersecretkey", former "S1CBQMX5QFD2SJWNL7TGX6ZGPWJAJGV5YKDPYR"
    public static final String SECRET = "11060cbf6051Ea49B357F99afEc99F648126Af70";

    // Public address for tests, former "S16WKSPIOD2SWPXJFQM4UTQ7P33R4YMMMGGDZP"
    public static final String TEST_S1 = "1f59527a1C3d4ACFba4B06729387dfBDC7986318";

    // Public address for tests, former "S2RQ3ZVRQ2K42FTXDONQVFVX73Q37JHIDCNDV2"
    public static final String TEST_S2 = "27b1fdb04752bbc536007a920d24acb045561c26";

    // Public address generated by private key "supersecretkey" for S3 address test
    public static final String TEST_S3 = "3eEAbcdcff071031B0e24b58865999E47bAc21DF";

    // Public address generated by private key "supersecretkey" for S4 address test
    public static final String TEST_S4 = "4BE15cfa331a1621D9E46Cf86171F67382E9Fc20";

    // Public address for S5 Test
    public static final String TEST_S5 = "5aAeb6053F3E94C9b9A09f33669435E7Ef1BeAed";

    // Public address for contract Test
    public static final String PUBLIC_CONTRACT = "fB6916095ca1df60bB79Ce92cE3Ea74c37c5d359";


    // Public address of Elkan, with private key "BOdbzfoE9Za9a4cGQTpExBYw7mQNFo2B", former "S1RQ3ZVRQ2K42FTXDONQVFVX73Q37JHIDCSFAR"
    public static final String ELKAN = "18C379AC61A573459Dc6E6C2a5aDfFB86fe93a06";

    // Public address of Kelly, with private key "Kelly", former "S1HY2JKBM44VJWCBZROTMOM5B3BYZWD7FVDVFS"
    public static final String KELLY = "13E3495059CE55361073174d8e6743B0e3361FCb";

    // Public address of Robert, with private key "Robert", former "S17LXTYN7HC4VHVTYZDENSTZOAD47HKV5FBEHR"
    public static final String ROBERT = "1fAEf3c37E7172a7ACf19191B29e5C01f3e7557A";

    @Autowired
    private LedgerStore ledgerStore;
    
    public AccountBuildCommand blank() {
        return new AccountBuildCommand();
    }
    
    public AccountBuildCommand elkan() {
        return new AccountBuildCommand()
                .withAddress(ELKAN)
                .withBalance(BigInteger.valueOf(9999L))
                .withSignatureCount(0);
    }
    
    public AccountBuildCommand robert() {
        return new AccountBuildCommand()
                .withAddress(ROBERT)
                .withBalance(BigInteger.valueOf(10L))
                .withSignatureCount(0);
    }
    
    public AccountBuildCommand kelly() {
        return new AccountBuildCommand()
                .withAddress(KELLY)
                .withBalance(BigInteger.valueOf(1L))
                .withSignatureCount(0);
    }
    
    public class AccountBuildCommand {
        
        private final Account account;
        
        public AccountBuildCommand() {
            this.account = new Account();
        }
        
        public AccountBuildCommand withAddress(String address) {
            account.setAddress(address);
            return this;
        }
        
        public AccountBuildCommand withBalance(BigInteger balance) {
            account.setBalance(balance);
            return this;
        }
        
        public AccountBuildCommand withSignatureCount(int signatureCount) {
            account.setSignatureCount(signatureCount);
            return this;
        }
        
        public Account save() {
            ledgerStore.writeToDB(account);
            return account;
        }
        
        public Account construct() {
            return account;
        }
        
    }
}
